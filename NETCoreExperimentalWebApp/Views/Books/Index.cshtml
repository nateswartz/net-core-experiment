@using Newtonsoft.Json
@model IEnumerable<BookModel>

@{
    ViewData["Title"] = "Index";
}

<div class="ui padded grid">
    <div class="row">
        <div class="column"><h2 class="ui header">List of Books</h2></div>
    </div>
    <div class="row">
        <div class="eight wide column"><button id="btnAddBook" class="ui button">Add a New Book</button></div>
        <div class="eight wide column">
            <div class="ui right floated icon buttons">
                <button id="btnDisplayGrid" class="ui button">
                    <i class="block layout icon"></i>
                </button>
                <button id="btnDisplayList" class="ui button">
                    <i class="sidebar icon"></i>
                </button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="column">
            <table id="listItems" class="ui celled table" style="display:none">
                <thead>
                    <tr>
                        <th>
                            Image
                        </th>
                        <th>
                            Title
                        </th>
                        <th>
                            Author
                        </th>
                        <th>
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody data-bind="foreach: books">
                    <tr>
                        <td>
                            <img class="ui tiny image" data-bind="attr: { src: Image }" />
                        </td>
                        <td data-bind="text: Title"></td>
                        <td data-bind="text: Author"></td>
                        <td>
                            <div class="ui button edit book" data-bind="attr: { 'data-id': id }">
                                <div>
                                    <i class="edit icon large"></i>
                                </div>
                            </div>
                            <div class="ui button">
                                <a data-bind="attr: { href: 'Books/Details/' + id() }">
                                    <i class="green info icon large"></i>
                                </a>
                            </div>
                            <div class="ui button delete book" data-bind="attr: { 'data-id': id, 'data-title': Title}">
                                <div>
                                    <i class="red delete icon large"></i>
                                </div>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="column">
            <div data-bind="foreach: books" id="gridItems" class="ui link cards column">
                <div class="ui card">
                    <a class="image edit book" data-bind="attr: { 'data-id': id }">
                        <img data-bind="attr: { src: Image }" />
                    </a>
                    <a class="content edit book" data-bind="attr: { 'data-id': id }">
                        <div class="header" data-bind="text: Title"></div>
                        <div class="meta" data-bind="text: Author"></div>
                    </a>
                    <div class="extra content">
                        <div class="ui fluid buttons">
                            <div class="ui button edit book" data-bind="attr: { 'data-id': id }">
                                <div>
                                    <i class="edit icon large"></i>
                                </div>
                            </div>
                            <div class="ui button">
                                <a data-bind="attr: { href: 'Books/Details/' + id() }">
                                    <i class="green info icon large"></i>
                                </a>
                            </div>
                            <div class="ui button delete book" data-bind="attr: { 'data-id': id, 'data-title': Title}">
                                <div>
                                    <i class="red delete icon large"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>





<div id="modalAddBook" class="ui small modal">
    <div class="header">
        Enter a New Book
    </div>
    <div class="content">
        <form id="frmAddBook" class="ui form" onsubmit="return false">
            <div class="field">
                <label>Title</label>
                <input id="inputAddBookTitle" type="text" name="Title">
            </div>
            <div class="field">
                <label>Author</label>
                <input id="inputAddBookAuthor" type="text" name="Author">
            </div>
            <div class="field">
                <label>Image</label>
                <input id="inputAddBookImage" type="text" name="Image">
            </div>
            <div class="field" id="fieldAddBookType">
                <label>Type</label>
                <select class="ui dropdown" name="dropdown" asp-items="Html.GetEnumSelectList<BookType>()"></select>
            </div>
            <div class="ui divider"></div>
            <div class="ui buttons">
                <button id="btnConfirmAddBook" class="ui primary button">Confirm</button>
                <button id="btnCancelAddBook" class="ui button">Cancel</button>
            </div>
            <div class="ui error message"></div>
        </form>
    </div>
</div>

<div id="modalDeleteBook" class="ui basic small modal">
    <div class="header">
        Are you sure you want to delete the book?
    </div>
    <input class="id" type="hidden" />
    <input class="title" type="hidden" />
    <input class="author" type="hidden" />
    <input class="type" type="hidden" />
    <div class="actions">
        <div id="btnCancelDeleteBook" class="ui red basic cancel inverted button">
            <i class="remove icon"></i>
            No
        </div>
        <div id="btnConfirmDeleteBook" class="ui green ok inverted button">
            <i class="checkmark icon"></i>
            Yes
        </div>
    </div>
</div>

<div id="modalEditBook" class="ui small modal">
    <div class="header">
        Edit Book Details
    </div>
    <div class="content">
        <form id="frmEditBook" class="ui form" onsubmit="return false">
            <input id="inputEditBookId" type="hidden" />
            <div class="field">
                <label>Title</label>
                <input id="inputEditBookTitle" type="text" name="Title" data-bind="value: currentBook().Title">
            </div>
            <div class="field">
                <label>Author</label>
                <input id="inputEditBookAuthor" type="text" name="Author" data-bind="value: currentBook().Author">
            </div>
            <div class="field">
                <label>Image</label>
                <input id="inputEditBookImage" type="text" name="Image" data-bind="value: currentBook().Image">
            </div>
            <div class="field" id="fieldEditBookType">
                <label>Type</label>
                <select class="ui dropdown" name="dropdown" asp-items="Html.GetEnumSelectList<BookType>()"></select>
            </div>
            <div class="ui divider"></div>
            <div class="ui buttons">
                <button id="btnConfirmEditBook" class="ui primary button">Confirm</button>
                <button id="btnCancelEditBook" class="ui button">Cancel</button>
            </div>
            <div class="ui error message"></div>
        </form>
    </div>
</div>

@section Scripts {
    <script type="text/javascript" src='@Url.Content("~/js/KOModels/BookViewModel.js")'></script>
    <script>
        // Do this right away
        if (localStorage.getItem('showGrid') === 'true') {
            $('#listItems').hide();
            $('#gridItems').show();
        } else {
            $('#gridItems').hide();
            $('#listItems').show();
        };

        function onListDeleteClick() {
            $("#modalDeleteBook .header").text("Are you sure you want to delete " + $(this).attr('data-title') + "?");
            $("#modalDeleteBook .id").val($(this).attr('data-id'));
            $("#modalDeleteBook").modal('show');
        };

        function onListEditClick() {
            resetEditBookModal();
            var myId = $(this).attr('data-id');
            viewModel.setCurrentBook(myId);
            $('#modalEditBook .ui.dropdown').dropdown('set selected', viewModel.currentBook().Type().toString());
            $("#modalEditBook").modal('show');
        }

        function resetAddBookModal() {
            $("#modalAddBook .ui.form").form('clear');
            $("#modalAddBook .error").removeClass("error");
            $('#modalAddBook .form .message').hide();
        };

        function resetEditBookModal() {
            $("#modalEditBook .ui.form").form('clear');
            $("#modalEditBook .error").removeClass("error");
            $('#modalEditBook .form .message').hide();
        };

        function addButtonBindings() {
            $(".delete.book").on("click", onListDeleteClick);
            $(".edit.book").on("click", onListEditClick);
        }

        viewModel = {
            books: ko.observableArray(),
            currentBook: ko.observable(''),

            setCurrentBook: function (id) {
                viewModel.currentBook(ko.utils.arrayFirst(viewModel.books(), function (book) {
                    return book.id().toString() === id;
                }));

            }
        };

        $(document).ready(function() {
            // Initialize dropdowns
            $('.ui.dropdown').dropdown();

            // Convert MVC Model to Knockout ViewModel
            ko.mapping.fromJS(@Html.Raw(JsonConvert.SerializeObject(Model)), {}, viewModel.books);
            ko.applyBindings(viewModel);

            // Setup add form
            $('#modalAddBook .ui.form').form({
                on: 'blur',
                fields: {
                    Title: {
                        identifier: 'inputAddBookTitle',
                        rules: [
                            {
                                type: 'empty',
                                prompt: 'Please enter a Title'
                            }
                        ]
                    },
                    Author: {
                        identifier: 'inputAddBookAuthor',
                        rules: [
                            {
                                type: 'empty',
                                prompt: 'Please enter an Author'
                            }
                        ]
                    },
                    Image: {
                        identifier: 'inputAddBookImage',
                        rules: [
                            {
                                type: 'empty',
                                prompt: 'Please enter an Image'
                            }
                        ]
                    }
                },
                onSuccess: function () {
                    var bookToAdd = new BookViewModel(0,
                        $("#inputAddBookAuthor").val(),
                        $("#inputAddBookTitle").val(),
                        $("#inputAddBookImage").val(),
                        $("#fieldAddBookType .active").text());
                    $.ajax({
                        type: "POST",
                        url: "/Books/Create",
                        data: JSON.stringify(ko.toJS(bookToAdd)),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (data) {
                            var book = ko.mapping.fromJS(data);
                            viewModel.books.push(book);
                            // When we add a new book we need to add a click handler to the delete button
                            addButtonBindings();
                        }
                    });
                    $("#modalAddBook").modal('hide');
                    resetAddBookModal();
                }
            });

            // Setup edit form
            $('#modalEditBook .ui.form').form({
                on: 'blur',
                fields: {
                    Title: {
                        identifier: 'inputEditBookTitle',
                        rules: [
                            {
                                type: 'empty',
                                prompt: 'Please enter a Title'
                            }
                        ]
                    },
                    Author: {
                        identifier: 'inputEditBookAuthor',
                        rules: [
                            {
                                type: 'empty',
                                prompt: 'Please enter an Author'
                            }
                        ]
                    },
                    Image: {
                        identifier: 'inputEditBookImage',
                        rules: [
                            {
                                type: 'empty',
                                prompt: 'Please enter an Image'
                            }
                        ]
                    }
                },
                onSuccess: function () {
                    var editBook = $.ajax({
                        type: "POST",
                        url: "/Books/Edit/" + viewModel.currentBook().id(),
                        data: JSON.stringify(ko.toJS(viewModel.currentBook())),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function() {
                            // When we add a new book we need to add a click handler to the delete button
                            addButtonBindings();
                        }
                    });
                    $("#modalEditBook").modal('hide');
                    resetEditBookModal();
                }
            });

            // Perform any event bindings on dynamic elements
            addButtonBindings();
        });

        // Event bindings on static elements
        $("#btnDisplayGrid").on("click",
            function() {
                $("#listItems").fadeOut();
                $("#gridItems").fadeIn();
                localStorage.setItem('showGrid', 'true');
            }
        );

        $("#btnDisplayList").on("click",
            function() {
                $("#gridItems").fadeOut();
                $("#listItems").fadeIn();
                localStorage.setItem('showGrid', 'false');
            }
        );

        $("#btnAddBook").on("click",
            function() {
                resetAddBookModal();
                $("#modalAddBook").modal('show');
            }
        );

        $("#btnCancelAddBook").on("click",
            function() {
                $("#modalAddBook").modal('hide');
                resetAddBookModal();
            }
        );

        $("#btnConfirmAddBook").on("click",
            function() {
                $('#modalAddBook .form .message').show();
            }
        );

        $("#btnCancelEditBook").on("click",
            function() {
                $("#modalEditBook").modal('hide');
                resetEditBookModal();
            }
        );

        $("#btnConfirmEditBook").on("click",
            function() {
                $('#modalEditBook .form .message').show();
            }
        );

        $("#btnConfirmDeleteBook").on("click",
            function() {
                $.ajax({
                    type: "POST",
                    url: "/Books/Delete/" + $("#modalDeleteBook .id").val(),
                    success: function() {
                        viewModel.books.remove(function(book) {
                            return book.id().toString() === $("#modalDeleteBook .id").val();
                        });
                    }
                });
            }
        );
    </script>
    }
