@using NETCoreExperimentalWebApp.Models.StarWarsModels
@using Newtonsoft.Json
@model IEnumerable<StarshipModel>

@{
    ViewData["Title"] = "Starships";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="ui header">Starships</h2>
<div class="ui form">
    <label>Filter By Name</label>
    <div class="ten wide field">
        <input class="filter starship name input" data-bind="value: nameQuery, valueUpdate: 'keyup'" placeholder="Name">
    </div>
    <label>Filter By Cost</label>
    <div class="two fields">
        <div class="five wide field">
            <input id="starshipCostOperatorInput" class="filter starship cost input" data-bind="value: costOperator, valueUpdate: 'keyup'" placeholder="< or >">
        </div>
        <div class="five wide field">
            <input id="starshipCostValueInput" class="filter starship cost input" data-bind="value: costValue, valueUpdate: 'keyup'" placeholder="value">
        </div>
    </div>
</div>
<div class="ui divider"></div>

<div data-bind="foreach: filteredStarships" id="gridItems" class="ui link cards column">
    <div class="ui card">
        <div class="content">
            <div class="header" data-bind="text: Name"></div>
        </div>
        <div class="content">
            <div class="meta" data-bind="text: Model"></div>
            <div class="meta" data-bind="text: Manufacturer"></div>
            <div class="meta" data-bind="text: Cost_In_Credits() + ' credits'"></div>
        </div>
        <div class="content">
            <div class="description" data-bind="text: Length() + ' meters'"></div>
            <div class="description" data-bind="text: 'Hyperdrive Rating: ' + Hyperdrive_Rating()"></div>
            <div class="description" data-bind="text: 'MGLT: ' + MGLT()"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript" src='@Url.Content("~/js/KOModels/StarshipViewModel.js")'></script>
    <script>
        viewModel = {
            allStarships: ko.observableArray(),
            nameQuery: ko.observable(''),
            costValue: ko.observable(''),
            costOperator: ko.observable('')
        };

        viewModel.filteredStarships = ko.computed(function () {
            console.log("name = " + viewModel.nameQuery());
            console.log("cost = " + viewModel.costValue())
            if (viewModel.nameQuery() != "") {
                return filterByName(viewModel.nameQuery());
            } else {
                console.log("Filter by cost");
                return filterByCost(viewModel.costValue(), viewModel.costOperator());
            }     
        });

        function filterByName(query) {
            return viewModel.allStarships().filter(function (starship) {
                return starship.Name().toLowerCase().indexOf(query.toLowerCase()) >= 0;
            });
        };

        function filterByCost(value, operator) {
            return viewModel.allStarships().filter(function (starship) {
                if (operator === "<") {
                    if (starship.Cost_In_Credits() === null) {
                        return false;
                    }
                    return starship.Cost_In_Credits() < value;
                }
                return starship.Cost_In_Credits() > value;
            });
        };

        $(document).ready(function () {
            $('.ui.dropdown').dropdown();

            // Convert MVC Model to Knockout ViewModel
            ko.mapping.fromJS(@Html.Raw(JsonConvert.SerializeObject(Model)), {}, viewModel.allStarships);
            ko.applyBindings(viewModel);
        });

        $(".starship.name").on("keyup",
            function() {
                viewModel.costValue('');
                viewModel.costOperator('');
            }
        );
    
        $(".starship.cost").on("keyup",
            function() {
                viewModel.nameQuery('');
            }
        );
    </script>
}