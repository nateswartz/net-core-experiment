@using NETCoreExperimentalWebApp.Models.StarWarsModels
@using Newtonsoft.Json
@model IEnumerable<StarshipModel>

@{
    ViewData["Title"] = "Starships";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="ui header">Starships</h2>
<div class="ui text">Filter By Name</div>
<div class="ui input">
    <input class="filter starship name input" data-bind="value: nameQuery, valueUpdate: 'keyup'" autocomplete="off">
</div>
<div class="ui text">Filter By Cost (Greater Than)</div>
<div class="ui input">
    <input class="filter starship cost input" data-bind="value: costQuery, valueUpdate: 'keyup'" autocomplete="off">
</div>
<div class="ui divider"></div>

<div data-bind="foreach: filteredStarships" id="gridItems" class="ui link cards column">
    <div class="ui card">
        <div class="content">
            <div class="header" data-bind="text: Name"></div>
        </div>
        <div class="content">
            <div class="meta" data-bind="text: Model"></div>
            <div class="meta" data-bind="text: Manufacturer"></div>
            <div class="meta" data-bind="text: Cost_In_Credits() + ' credits'"></div>
        </div>
        <div class="content">
            <div class="description" data-bind="text: Length() + ' meters'"></div>
            <div class="description" data-bind="text: 'Hyperdrive Rating: ' + Hyperdrive_Rating()"></div>
            <div class="description" data-bind="text: 'MGLT: ' + MGLT()"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript" src='@Url.Content("~/js/KOModels/StarshipViewModel.js")'></script>
    <script>
        viewModel = {
            allStarships: ko.observableArray(),
            nameQuery: ko.observable(''),
            costQuery: ko.observable('')
        };

        viewModel.filteredStarships = ko.computed(function () {
            if (viewModel.nameQuery() != "") {
                return filterByName(viewModel.nameQuery());
            } else {
                return filterByCost(viewModel.costQuery());
            }     
        });

        function filterByName(query) {
            return viewModel.allStarships().filter(function (starship) {
                return starship.Name().toLowerCase().indexOf(query.toLowerCase()) >= 0;
            });
        };

        function filterByCost(query) {
            return viewModel.allStarships().filter(function (starship) {
                return starship.Cost_In_Credits() > query;
            });
        };

        $(document).ready(function () {
            // Convert MVC Model to Knockout ViewModel
            ko.mapping.fromJS(@Html.Raw(JsonConvert.SerializeObject(Model)), {}, viewModel.allStarships);
            ko.applyBindings(viewModel);
        });

    </script>
}